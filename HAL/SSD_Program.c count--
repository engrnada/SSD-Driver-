/*
 * Program.c
 *
 *  Created on: Nov 4, 2023
 *      Author: Nada
 */


#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO_interface.h"
#include "SSD_interface.h"
#include "SSD_Private.h"
#include "SSD_Config.h"

static u8 SSDnumber [10] = SSD_Arr;

void SSD_VoidInitPort(SSD_Adjusting SSD_Signal){

	 DIO_enumSetPinDirection    (SSD_Signal.Port,SSD_Signal.Pin, DIO_PIN_OUTPUT);

}

void SSD_VoidOn(SSD_Adjusting SSD_Signal){
	if (SSD_Signal.Common == Common_cathode){
	DIO_enumSetPinDirection    (SSD_Signal.EnablePort,SSD_Signal.Pin, DIO_PIN_OUTPUT);
	DIO_enumSetPinValue        (SSD_Signal.EnablePort, SSD_Signal.Pin, DIO_PIN_LOW);
	}
	else if (SSD_Signal.Common == Common_Anode){
		DIO_enumSetPinDirection    (SSD_Signal.EnablePort,SSD_Signal.Pin, DIO_PIN_OUTPUT);
			DIO_enumSetPinValue        (SSD_Signal.EnablePort, SSD_Signal.Pin, DIO_PIN_HIGH);
	}

}

void SSD_VoidOf(SSD_Adjusting SSD_Signal){

	if (SSD_Signal.Common == Common_cathode){
		DIO_enumSetPinDirection    (SSD_Signal.EnablePort,SSD_Signal.Pin, DIO_PIN_OUTPUT);
		DIO_enumSetPinValue        (SSD_Signal.EnablePort, SSD_Signal.Pin, DIO_PIN_HIGH);
		}
		else if (SSD_Signal.Common == Common_Anode){
			DIO_enumSetPinDirection    (SSD_Signal.EnablePort,SSD_Signal.Pin, DIO_PIN_OUTPUT);
				DIO_enumSetPinValue        (SSD_Signal.EnablePort, SSD_Signal.Pin, DIO_PIN_LOW);
		}


}

void SSD_VoidWrite(SSD_Adjusting SSD_Signal, u8 CopyNumber){
	if (SSD_Signal.Common == Common_cathode){
			DIO_enumTogglePinValue    (SSD_Signal.EnablePort, SSDnumber[CopyNumber]);

			}
			else if (SSD_Signal.Common == Common_Anode){
				DIO_enumTogglePinValue    (SSD_Signal.EnablePort, ~(SSDnumber[CopyNumber]));

			}


}
int main()
{
	SSD_Adjusting SSD_Write = {Common_cathode, SSD_PORTA, SSD_PORTA, SSD_PIN0};
	SSD_Adjusting SSD_Init = { SSD_PORTA, SSD_PIN0, DIO_PIN_OUTPUT};
	SSD_Adjusting SSD_Enable = { SSD_PORTA, SSD_PIN0, DIO_PIN_OUTPUT};

	while(1){
	for(int i=0; i>10; i--){
	SSD_VoidInitPort(SSD_Init);
	SSD_VoidOn(SSD_Enable);
	SSD_VoidWrite(SSD_Write, i);

	}

	}
	return 0;
}

